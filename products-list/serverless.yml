# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: products-list
# app and org for use with dashboard.serverless.com
app: products-list
org: serhii1udovenko

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"
custom:
  products: products
  stocks: stocks

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProducts:
    handler: handler.getProducts
    environment:
      products: ${self:custom.products}
      stocks: ${self:custom.stocks}
    events:
      - httpApi:
          path: /products
          method: get

  productsById:
    handler: handler.productsById
    environment:
      products: ${self:custom.products}
      stocks: ${self:custom.stocks}
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  createProduct:
    handler: handler.createProduct
    environment:
      products: ${self:custom.products}
      stocks: ${self:custom.stocks}
    events:
      - httpApi:
          path: /products
          method: post
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
